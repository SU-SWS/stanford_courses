<?php

/**
 * @file
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\migrate_tools\MigrateBatchExecutable;
use Drupal\migrate\MigrateMessage;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Cache\Cache;

/**
 * @file
 * Stanford_courses_importer.module.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 * config-page-stanford-courses-importer-form config-pages-form
 *
 * Alter the config form to add the migrate_tools UI.
 */
function stanford_courses_importer_form_config_pages_stanford_courses_importer_form_alter(array &$form, FormStateInterface $form_state) {
  $user = \Drupal::currentUser();
  $form['actions']['#type'] = 'fieldset';

  $form['actions']['import'] = [
    '#type' => 'submit',
    '#value' => t('Save & Import'),
    '#name' => 'op',
    '#button_type' => "primary",
    '#submit' => [
      "::submitForm",
      "::save",
      "stanford_courses_importer_form_config_pages_stanford_courses_importer_form_alter_submit",
    ],
  ];
  return $form;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function stanford_courses_importer_config_pages_presave(EntityInterface $entity) {
  // Clear out config and migration cache to allow config overrides to take
  // effect.
  if ($entity->bundle() == 'stanford_courses_importer') {
    Cache::invalidateTags([
      'config:migrate_plus.migration.stanford_courses_importer',
      'migration_plugins',
    ]);
  }
}

/**
 * Submit handler for the config form override.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function stanford_courses_importer_form_config_pages_stanford_courses_importer_form_alter_submit(array &$form, FormStateInterface $form_state) {
  // Get the migration object from the ones available.
  $migrations = stanford_migrate_migration_list();
  $migration_plugin = $migrations["stanford_courses"]["stanford_courses"] ?? FALSE;

  // Can't find it.
  if (!$migration_plugin) {
    \Drupal::messenger()->addError('Could not find the stanford_courses migration!');
    return;
  }

  // Spin up the things we need and run em.
  $migrateMessage = new MigrateMessage();
  $options = [
    'update' => TRUE,
    'force' => TRUE,
  ];

  try {
    $executable = new MigrateBatchExecutable($migration_plugin, $migrateMessage, $options);
    $executable->batchImport();

  }
  catch (Exception $e) {
    \Drupal::messenger()->addError('Could not run Courses importer!');
  }

}
